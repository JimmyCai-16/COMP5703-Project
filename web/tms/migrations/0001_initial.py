# Generated by Django 4.1.5 on 2024-08-26 14:39

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('media_file', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Moratorium',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('effective_date', models.DateField()),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(srid=4326)),
            ],
            options={
                'ordering': ['effective_date'],
            },
        ),
        migrations.CreateModel(
            name='QLDEnvironmentalAuthority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=100)),
                ('condition_type', models.CharField(max_length=100)),
                ('activity', models.CharField(max_length=512)),
                ('status', models.CharField(choices=[('G', 'Granted'), ('GN', 'Granted - Not Effective'), ('X', 'Suspended'), ('S', 'Surrendered'), ('C', 'Cancelled'), ('E', 'Expired')], max_length=2)),
                ('holder', models.CharField(max_length=512)),
                ('assurance', models.FloatField(blank=True, null=True)),
                ('date_effective', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='QLDTenementBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block_identification_map', models.CharField(choices=[('ALIC', 'Alice Springs'), ('ARMI', 'Armidale'), ('BOUR', 'Bourke'), ('BRIS', 'Brisbane'), ('BROK', 'Broken Hill'), ('CLON', 'Cloncurry'), ('COOK', 'Cooktown'), ('CLER', 'Clermont'), ('CHAR', 'Charleville'), ('COOP', 'Cooper Creek'), ('MITC', 'Mitchell River'), ('NORM', 'Normanton'), ('OODN', 'Oodnadatta'), ('ROCK', 'Rockhampton'), ('TOWN', 'Townsville'), ('TORR', 'Torres Strait'), ('NEWC', 'Newcastle Waters')], max_length=4)),
                ('number', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3456)])),
                ('status', models.CharField(choices=[('G', 'Granted'), ('R', 'Relinquished'), ('C', 'Current')], default='G', max_length=1)),
                ('sub_blocks', models.JSONField()),
            ],
            options={
                'ordering': ['tenement', 'block_identification_map', 'number'],
            },
        ),
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('area', django.contrib.gis.db.models.fields.GeometryField(blank=True, dim=1, null=True, srid=4326)),
            ],
            options={
                'ordering': ['project'],
            },
        ),
        migrations.CreateModel(
            name='Tenement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permit_state', models.CharField(choices=[('ACT', 'Australian Capital Territory'), ('NSW', 'New South Wales'), ('NT', 'Northern Territory'), ('QLD', 'Queensland'), ('SA', 'South Australia'), ('TAS', 'Tasmania'), ('VIC', 'Victoria'), ('WA', 'Western Australia')], max_length=3)),
                ('permit_type', models.CharField(choices=[('EPM', 'Exploration Permit for Minerals'), ('MDL', 'Mining Development Licence'), ('ML', 'Mining Lease'), ('EPC', 'Exploration Permit for Coal'), ('ATP', 'Authorities to Prospect for Petroleum'), ('CML', 'Coal Mining Lease'), ('MEL', 'Commonwealth Exploration'), ('E', 'Exploration License'), ('EOS', 'Exploration License Offshore'), ('G', 'General Purpose Lease'), ('AG', 'General Purpose Lease S.A.'), ('LTT', 'License to Treat Tailings'), ('MC', 'Mineral Claim'), ('ML', 'Mineral Lease'), ('AML', 'Mineral Lease S.A.'), ('M', 'Mining Lease'), ('AM', 'Mining Lease S.A.'), ('L', 'Miscellaneous Licence'), ('AL', 'Miscellaneous Licence S.A.'), ('P', 'Prospecting Licence'), ('R', 'Retention Licence'), ('TR', 'Temporary Reserver'), ('DL', 'Development Lease'), ('EL', 'Exploration License'), ('LSE', 'Extractive Industry Lease'), ('LIC', 'Extractive Industry Licence'), ('ESP', 'Extractive Search Permit'), ('GML', 'Gold Mining Lease'), ('MIL', 'Mineral Lease'), ('SL', 'Mineral Search Licence'), ('MRC', "Miner's Right Claim"), ('ML', 'Mining Lease'), ('MLA', 'Mining Lease Application'), ('MAL', 'Mining Area Licence'), ('MN', 'Mining Licence'), ('SPC', 'Not Operating Under Our Acts'), ('PL', 'Prospecting Licence'), ('PAL', 'Prospecting Area Licence'), ('RL', 'Retention Licence'), ('SML', 'Special Mining Lease'), ('TL', 'Tailings Licence'), ('TRL', 'Tailings Removal Licence'), ('TTL', 'Tailings Treatment Licence'), ('TMA', 'Tourist Mining Authority'), ('WLL', 'Water Line Licence'), ('WA', 'Work Authority')], max_length=10)),
                ('permit_number', models.IntegerField()),
                ('permit_name', models.CharField(blank=True, max_length=256, null=True)),
                ('permit_status', models.CharField(choices=[('G', 'Granted'), ('C', 'Current'), ('A', 'Application'), ('AP', 'Application (Priority Applicant)'), ('AR', 'Application (Ranked)'), ('RA', 'Renewal Application Lodged'), ('W', 'Withdrawn'), ('Z', 'Achieved'), ('T', 'Temporary'), ('S', 'Surrendered'), ('N', 'Non-current')], max_length=2)),
                ('date_lodged', models.DateField()),
                ('date_granted', models.DateField(blank=True, null=True)),
                ('date_commenced', models.DateField(blank=True, null=True)),
                ('date_expiry', models.DateField(blank=True, null=True)),
                ('date_renewed', models.DateField(blank=True, null=True)),
                ('ahr_name', models.CharField(blank=True, max_length=256, null=True)),
                ('ahr_address', models.CharField(blank=True, max_length=256, null=True)),
                ('ahr_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('ahr_mobile_number', models.CharField(blank=True, max_length=32, null=True)),
                ('ahr_phone_number', models.CharField(blank=True, max_length=32, null=True)),
                ('area_units', models.FloatField(blank=True, null=True)),
                ('area_label', models.CharField(blank=True, max_length=256, null=True)),
                ('area_exclusions', models.CharField(blank=True, max_length=1024, null=True)),
                ('area_locality', models.CharField(blank=True, max_length=256, null=True)),
                ('area_local_authority', models.CharField(blank=True, max_length=256, null=True)),
                ('area_mining_district', models.CharField(blank=True, max_length=256, null=True)),
                ('area_polygons', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('prescribed_minerals', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('rent_rate', models.FloatField(blank=True, null=True)),
                ('native_title_description', models.CharField(blank=True, max_length=256, null=True)),
                ('native_title_outcome', models.CharField(blank=True, max_length=256, null=True)),
                ('native_title_parties', models.CharField(blank=True, max_length=256, null=True)),
                ('native_title_process', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'ordering': ['permit_state', 'permit_type', 'permit_number'],
            },
        ),
        migrations.CreateModel(
            name='TenementHolder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('acn', models.CharField(blank=True, max_length=256, null=True)),
                ('address', models.CharField(max_length=256)),
                ('change', models.CharField(max_length=256)),
                ('status', models.CharField(choices=[('C', 'Current'), ('F', 'Former')], max_length=256)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('date_start', models.DateField()),
                ('date_end', models.DateField(blank=True, null=True)),
                ('is_authorised_holder', models.BooleanField()),
                ('name_main', models.CharField(max_length=256)),
                ('name_other', models.CharField(max_length=256)),
                ('permit_role_type', models.CharField(max_length=256)),
                ('tenancy_type_description', models.CharField(max_length=256)),
                ('share_percent', models.FloatField(validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(100.0)])),
            ],
        ),
        migrations.CreateModel(
            name='TenementTask',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('due_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('archived', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['due_date', '-archived'],
            },
        ),
        migrations.CreateModel(
            name='WorkProgram',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('estimated_expenditure', models.FloatField()),
                ('year', models.PositiveIntegerField()),
                ('discipline', models.IntegerField(choices=[(0, 'Desktop Studies'), (1, 'Drilling'), (2, 'Feasibility Studies'), (3, 'Geophysics'), (4, 'Mapping'), (5, 'Remote Sensing'), (6, 'Resource Evaluation'), (7, 'Sample Analysis'), (8, 'Sample Collection'), (9, 'Site Logistics'), (10, 'Site Technical')])),
                ('activity', models.IntegerField(choices=[(0, 'Consultancy Studies'), (1, 'Geological and Geophysical Review'), (2, 'Geophysical Data Reprocessing'), (3, 'Gravity Data Reprocessing'), (4, 'Gravity Data Reprocessing (Fixed Cost)'), (5, 'Magnetic Data Reprocessing'), (6, 'Magnetic Data Reprocessing (Fixed Cost)'), (7, 'Seismic Data Reprocessing'), (8, 'Seismic Data Reprocessing (Fixed Cost)'), (9, 'Technical Review'), (10, 'Air Core Drilling'), (11, 'Augur Drilling'), (12, 'Diamond'), (13, 'Directional'), (14, 'Geotechnical Drilling'), (15, 'Hammer'), (16, 'Large Diameter'), (17, 'Mixed Type'), (18, 'Mud'), (19, 'Percussion'), (20, 'Precollar'), (21, 'Reverse Circulation'), (22, 'Sonic/Vibratory Drilling'), (23, 'Tri-Cone'), (24, 'Bankable Feasibility Study (BFS)'), (25, 'Definitive Feasibility Study (DFS)'), (26, 'Engineering and Design'), (27, 'Environmental Assessment'), (28, 'Market Analysis'), (29, 'Mine Planning'), (30, 'Preliminary Feasibility Study (PFS)'), (31, 'Scoping Study'), (32, 'Downhole Geophysics'), (33, 'Downhole Survey'), (34, 'Electromagnetic'), (35, 'Gravity'), (36, 'Ground Penetrating Radar'), (37, 'Induce Polarisation'), (38, 'Magnetics'), (39, 'Magnetotellurics'), (40, 'Radiometric'), (41, 'Resistivity'), (42, 'Seismic (2 Dimensional)'), (43, 'Seismic (3 Dimensional)'), (44, 'Self Potential'), (45, 'Sub-audio Magnetics'), (46, 'Alteration'), (47, 'Geological'), (48, 'Reconnaissance'), (49, 'Structural'), (50, 'Aerial Photography (Broader Spectrum Imagery)'), (51, 'Interpretation and Modelling'), (52, 'Aerial Photography (Visible Imagery)'), (53, 'Broader Spectrum Imagery'), (54, 'Satellite Imagery (Visible Imagery)'), (55, 'Metallurgical Studies'), (56, 'Geological Modelling'), (57, 'JORC Resource Estimation'), (58, 'Resource Modelling'), (59, 'Bulk Leach Extracted Gold'), (60, 'Chromatographic Soils/Gas'), (61, 'Drill Sample Assays'), (62, 'General Sample Assays'), (63, 'Mineral/Petrology'), (64, 'Mobile Metal Ion'), (65, 'Multi-Element'), (66, 'Portable Analytical Tools'), (67, 'Rock Chips'), (68, 'Soils'), (69, 'Costeaning'), (70, 'Hand Sampling'), (71, 'Rock Chips'), (72, 'Soils'), (73, 'Stream Sediments'), (74, 'Trenching'), (75, 'Access or Drill Site Preparation costs'), (76, 'Vehicle / Accomodation'), (77, 'Rehabilitiation costs'), (78, 'Chip logging'), (79, 'Consultancy Cost'), (80, 'Core logging'), (81, 'Geotechnical logging'), (82, 'Internal Project Staff Cost'), (83, 'Program Supervision')])),
                ('units', models.FloatField()),
                ('quantity', models.FloatField(default=0.0)),
                ('slug', models.SlugField(max_length=200)),
                ('tenement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='work_programs', to='tms.tenement')),
            ],
            options={
                'ordering': ['tenement', 'year', 'discipline', 'activity'],
            },
        ),
        migrations.CreateModel(
            name='WorkProgramReceipt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('cost', models.FloatField()),
                ('date_created', models.DateField(auto_now_add=True)),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='receipt_files', to='media_file.mediafile')),
                ('work_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receipts', to='tms.workprogram')),
            ],
        ),
    ]
